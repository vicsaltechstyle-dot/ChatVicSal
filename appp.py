# Importaciones necesarias
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import logging 

# Configuraci√≥n de Logging
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

# =======================================================
# ‚ö†Ô∏è MEN√ö INTERNO (Corregido y Limpiado)
# =======================================================
menus_data = {
    "menu_principal": [
        "Curso Excel",
        "Chat bot para negocio",
        "Automatizaci√≥n de Procesos con Python",
        "Dise√±o de Dashboards y an√°lisis de datos en Excel",
        "Consultor√≠a en Tecnolog√≠a"
    ]
}


# --- CONFIGURACI√ìN DE RUTAS Y CONEXI√ìN ---

# Se construye la ruta relativa del archivo credentials.json
ruta_base = os.path.dirname(__file__) 
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
ruta_credenciales = os.path.join(ruta_base, "credentials.json")

# Conexi√≥n a Google Sheets
try:
    # ‚ö†Ô∏è ASUME que 'credentials.json' est√° en la misma carpeta
    creds = ServiceAccountCredentials.from_json_keyfile_name(ruta_credenciales, scope)
    client = gspread.authorize(creds)
    sheet = client.open("Registro_clientes").sheet1
    logging.info("‚úÖ Conexi√≥n a Google Sheets exitosa.")
except Exception as e:
    logging.error(f"‚ùå ERROR CR√çTICO DE CONEXI√ìN A GOOGLE SHEETS: {e}")
    sheet = None 

# Funci√≥n para guardar datos
def guardar_datos(nombre, telefono, correo, opcion, tipo_servicio):
    if sheet:
        try:
            fecha_hora = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            sheet.append_row([fecha_hora, nombre, telefono, correo, opcion, tipo_servicio])
            logging.info(f"üíæ Datos guardados: {nombre}, {opcion}")
        except Exception as e:
            logging.error(f"‚ùå ERROR al guardar en Google Sheets: {e}")
            
# Estado del chat por usuario (Persistencia en memoria)
usuarios = {}

# =======================================================
# RUTA WEBHOOK DE TWILIO (M√âTODO POST)
# =======================================================
@app.route("/whatsapp", methods=["POST"])
def whatsapp_bot():
    """Maneja los mensajes entrantes de Twilio y ejecuta la l√≥gica de conversaci√≥n."""
    
    incoming_msg = request.values.get("Body", "").strip()
    from_number = request.values.get("From", "") 
    resp = MessagingResponse()
    msg = resp.message()
    
    # 1. Inicializar/Cargar estado del usuario
    if from_number not in usuarios:
        usuarios[from_number] = {"estado": "menu1"} 

    estado = usuarios[from_number]["estado"]

    # --- FLUJO DE LA CONVERSACI√ìN (M√°quina de estados simple) ---

    if estado == "menu1" or incoming_msg.lower() in ["reiniciar", "start"]:
        menu_text = "Hola, bienvenido a VicSalTech üòÑ\n¬øC√≥mo puedo ayudarte?\n"
        for i, opcion in enumerate(menus_data["menu_principal"], start=1):
            # Se usa el √≠ndice (i) para la numeraci√≥n, no la opci√≥n en s√≠
            menu_text += f"{i}. {opcion}\n"
        menu_text += "Por favor escribe el n√∫mero de tu opci√≥n."
        msg.body(menu_text)
        usuarios[from_number]["estado"] = "esperando_opcion"
        
    elif estado == "esperando_opcion":
        try:
            opcion_index = int(incoming_msg) - 1
            # Accede a la opci√≥n usando el √≠ndice num√©rico
            opcion_seleccionada = menus_data["menu_principal"][opcion_index]
            usuarios[from_number]["opcion"] = opcion_seleccionada
            usuarios[from_number]["estado"] = "menu2"
            msg.body(f"Elegiste: {opcion_seleccionada}\n1. Cotizaci√≥n\n2. Solicitar servicio\nEscribe el n√∫mero:")
            
        except (ValueError, IndexError):
            msg.body("üö´ Opci√≥n inv√°lida. Por favor escribe un n√∫mero v√°lido del men√∫.")
    
    elif estado == "menu2":
        if incoming_msg in ["1", "2"]:
            tipo_servicio = "Cotizaci√≥n" if incoming_msg == "1" else "Solicitud"
            usuarios[from_number]["tipo_servicio"] = tipo_servicio
            usuarios[from_number]["estado"] = "nombre"
            msg.body("üìù Perfecto. Por favor escribe tu nombre completo:")
        else:
            msg.body("üö´ Opci√≥n inv√°lida. Por favor escribe 1 para Cotizaci√≥n o 2 para Solicitar servicio.")
    
    elif estado == "nombre":
        usuarios[from_number]["nombre"] = incoming_msg
        usuarios[from_number]["estado"] = "telefono"
        msg.body("üìû Gracias. Por favor escribe tu n√∫mero de tel√©fono:")
    
    elif estado == "telefono":
        usuarios[from_number]["telefono"] = incoming_msg
        usuarios[from_number]["estado"] = "correo"
        msg.body("üìß Entendido. Por favor escribe tu correo electr√≥nico:")
    
    elif estado == "correo":
        usuarios[from_number]["correo"] = incoming_msg
        
        # 4. GUARDAR DATOS Y FINALIZAR
        guardar_datos(
            usuarios[from_number]["nombre"],
            usuarios[from_number]["telefono"],
            usuarios[from_number]["correo"],
            usuarios[from_number]["opcion"],
            usuarios[from_number]["tipo_servicio"]
        )
        
        msg.body("‚úÖ ¬°Registro Completado! ¬°Muchas Gracias!. Uno de nuestros expertos se pondr√° en contacto contigo a la brevedad. Escribe 'reiniciar' si quieres empezar de nuevo.")
        usuarios.pop(from_number) 
    
    else:
        msg.body("‚ùì Error inesperado. Escribe 'reiniciar' para empezar de nuevo.")
        usuarios.pop(from_number) 

    return str(resp)
# Se elimina app.run() para que Gunicorn/Render gestione el inicio.
